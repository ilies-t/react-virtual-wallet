{"version":3,"sources":["../../React-virtual-wallet/src/components/Account.js","../../React-virtual-wallet/src/components/User.js","../../React-virtual-wallet/src/App.js","../../React-virtual-wallet/src/serviceWorker.js","../../React-virtual-wallet/src/index.js"],"names":["Account","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","count","valueHowMany","valueTitle","listAll","formError","title","number","event","preventDefault","result","Number","fullDate","Date","getMonth","getDate","getFullYear","getHours","getMinutes","test","setState","transaction","howMany","date","concat","toConsumableArray","console","log","_this2","map","item","index","react_default","a","createElement","className","key","toLocaleString","props","currency","_this3","placeholderHowMany","value","onChange","e","target","placeholder","onClick","won","bind","spent","renderOnDOM","Component","User","name","App","components_User","components_Account","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.022c5ba8.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Account extends Component{\n  constructor(){\n    super();\n    this.state = {\n      count: 0,\n      valueHowMany: '',\n      valueTitle: '',\n      listAll: [],\n      formError: [\n        {title: 0, number: 0}\n      ]\n    };\n  };\n  \n  // functions ------------------------------------------------------------------------------------------\n  won(event) {\n    event.preventDefault();\n    // calculate the result, count = count + valueHowMany\n    let result = Number(this.state.count) + Number(this.state.valueHowMany)\n\n    // get the date\n    let fullDate = (new Date().getMonth() + 1)+'-'+(new Date().getDate())+'-'+(new Date().getFullYear())+' '+(new Date().getHours())+'h'+new Date().getMinutes();\n\n    // execute only if the 'inputNumber' is a number (with regex) and if the 'valueTitle' is not empty\n    // append to 'listAll' new values: (title | transaction | howMany | date) before old values\n    let regex = /^[0-9\\b]+$/;\n    if(this.state.valueTitle !== '' && this.state.valueHowMany !== '' && regex.test(this.state.valueHowMany)) {\n      this.setState({\n        count: result,\n        listAll: [\n          {title: this.state.valueTitle, transaction: '+', howMany: this.state.valueHowMany, date: fullDate},\n            ...this.state.listAll\n        ],\n        valueTitle: '',\n        valueHowMany: ''\n      });\n    } else { console.log('⛔️ Form is not good'); };\n  }\n\n  spent(event) {\n    event.preventDefault();\n    // calculate the result, count = count - valueHowMany\n    let result = Number(this.state.count) - Number(this.state.valueHowMany)\n\n    // get the date\n    let fullDate = (new Date().getMonth() + 1)+'-'+(new Date().getDate())+'-'+(new Date().getFullYear())+' '+(new Date().getHours())+'h'+new Date().getMinutes();\n\n    // also, test if result of operation is >= 0 \n    // append to listAll new values: (title | transaction | howMany | date) before old values\n    let regex = /^[0-9\\b]+$/;\n    if(this.state.valueTitle !== '' && this.state.valueHowMany !== '' && regex.test(this.state.valueHowMany) && result >= 0) {\n      this.setState({\n        count: result,\n        fullDate: fullDate,\n        listAll: [\n          {title: this.state.valueTitle, transaction: '-', howMany: this.state.valueHowMany, date: fullDate},\n            ...this.state.listAll\n        ],\n        valueTitle: '',\n        valueHowMany: ''\n      })\n    } else { console.log('⛔️ Form is not good'); };\n  }\n\n  renderOnDOM() {\n    // iterate items -> item and render on DOM the elements of the list \"listAll\"\n    return this.state.listAll.map((item, index) => {\n      return(\n        <div className=\"itemRecent\" key={index}>\n          <h5>{item.title} • {item.date}</h5>\n          <h5>{item.transaction}{Number(item.howMany).toLocaleString()} {this.props.currency}</h5>\n        </div>\n      )\n    });\n  }\n\n  // render ------------------------------------------------------------------------------------------\n  render() {\n    const placeholderHowMany = \"How many... (without \"+this.props.currency+\")\"\n    return(\n      <div>\n        <div className=\"balance\">\n          <h2 className=\"nbBalance\">{this.state.count.toLocaleString()} {this.props.currency}</h2>\n        </div>\n\n        <div className=\"action\">\n          <form>\n              <input\n                value={this.state.valueTitle}\n                onChange={(e) => this.setState({ valueTitle: e.target.value })}\n                placeholder='Title of transaction..'\n              />\n              <input\n                value={this.state.valueHowMany}\n                onChange={(e) => this.setState({ valueHowMany : e.target.value })}\n                placeholder={placeholderHowMany}\n              />\n          <button className=\"button1\" onClick={this.won.bind(this)}>Won</button>\n          <button className=\"button2\" onClick={this.spent.bind(this)}>Spent</button>\n          </form>\n        </div>\n\n        <div>\n          <div className=\"recent\">\n            <h2>Recents transactions</h2>\n            {this.renderOnDOM()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Account;","import React, { Component } from 'react';\n// import logo from '../lib/assets/images/icon/brands/cnn.svg';\n\nclass User extends Component{\n    render() {\n        return(\n            <header>\n                <h1>Hi {this.props.name}!</h1>\n                <h2>My balance</h2>\n            </header>\n        );\n    }\n}\n\nexport default User;","import React from 'react';\nimport Account from './components/Account';\nimport User from './components/User';\nimport './style/style.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <User name=\"Username\"/>\n      <Account currency=\"$\"/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/style.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}